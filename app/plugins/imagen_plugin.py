# app/plugins/imagen_plugin.py

import logging
import os
import json
from typing import Dict, Any, List
from vertexai.preview.vision_models import ImageGenerationModel
import vertexai

from .base import ToolPlugin

logger = logging.getLogger(__name__)

# --- Configuration ---
PROJECT_ID = os.getenv("GOOGLE_CLOUD_PROJECT_ID")
LOCATION = "us-central1"  # Vertex AI location for Imagen

# --- Custom Exception ---
class ImagenGenerationError(Exception):
    """Custom exception for errors during Imagen asset generation."""
    pass

# --- Plugin Definition ---
class ImagenGenerator(ToolPlugin):
    """
    A plugin that generates images using Google's Imagen model via Vertex AI.
    Creates high-quality images from text descriptions.
    """

    def __init__(self):
        super().__init__()
        if not PROJECT_ID:
            raise ValueError("GOOGLE_CLOUD_PROJECT_ID environment variable not found or not set.")
        
        # Initialize Vertex AI
        vertexai.init(project=PROJECT_ID, location=LOCATION)
        self.model = ImageGenerationModel.from_pretrained("imagen-3.0-generate-001")

    @property
    def name(self) -> str:
        return "Imagen Generator"

    @property
    def description(self) -> str:
        return (
            "Generates high-quality static images from text descriptions using Google's Imagen model. "
            "Perfect for creating backgrounds, illustrations, graphics, logos, or any visual content needed for video composition. "
            "The output is always a PNG file with optional transparency support. "
            "CAN DO: Photorealistic images, artistic illustrations, logos, textures, backgrounds, objects, scenes, abstract art. "
            "CANNOT DO: Video generation (use Veo), animations (use Manim), audio content (use Music/Voiceover plugins). "
            "TECHNICAL SPECS: High-resolution PNG output, supports transparency, optimized for video overlay use."
        )

    def get_input_format(self) -> Dict[str, Any]:
        """Returns the input format specification for the Imagen plugin."""
        return {
            "required_fields": ["task", "unit_id", "output_filename"],
            "optional_fields": {},
            "examples": [
                {
                    "task": "Create a vibrant blue gradient background",
                    "unit_id": "blue_gradient_bg",
                    "output_filename": "background.png"
                },
                {
                    "task": "Generate a modern company logo with geometric shapes",
                    "unit_id": "company_logo_v1", 
                    "output_filename": "logo.png"
                },
                {
                    "task": "Create a sunset landscape for video background",
                    "unit_id": "sunset_background",
                    "output_filename": "landscape.png"
                }
            ]
        }

    def execute_task(self, task_details: Dict, asset_unit_path: str, run_logger: logging.Logger) -> List[str]:
        prompt = task_details["task"]
        output_filename = task_details["output_filename"]
        
        run_logger.info(f"IMAGEN PLUGIN: Starting task for unit '{task_details.get('unit_id')}' - '{prompt[:100]}...'.")

        try:
            # Generate image using Imagen
            run_logger.info("IMAGEN PLUGIN: Calling Vertex AI Imagen model...")
            
            response = self.model.generate_images(
                prompt=prompt,
                number_of_images=1,
                aspect_ratio="1:1",  # Default to square, could be made configurable
                safety_filter_level="block_some",
                person_generation="allow_adult"
            )
            
            if not response.images:
                raise ImagenGenerationError("No images were generated by Imagen model")
            
            # Save the generated image
            image = response.images[0]
            output_path = os.path.join(asset_unit_path, output_filename)
            
            run_logger.info(f"IMAGEN PLUGIN: Saving generated image to {output_path}")
            image.save(output_path)
            
            # Verify the file was created
            if not os.path.exists(output_path):
                raise ImagenGenerationError(f"Generated image file not found at {output_path}")
            
            # Get file size for logging
            file_size = os.path.getsize(output_path)
            run_logger.info(f"IMAGEN PLUGIN: Successfully generated image ({file_size} bytes)")
            
            # Create metadata
            plugin_data = {
                "prompt": prompt,
                "model": "imagen-3.0-generate-001",
                "aspect_ratio": "1:1",
                "file_size_bytes": file_size
            }
            
            self._create_metadata_file(
                task_details, 
                asset_unit_path, 
                [output_filename], 
                plugin_data
            )
            
            run_logger.info(f"IMAGEN PLUGIN: Task completed successfully. Generated: {output_filename}")
            return [output_filename]
            
        except Exception as e:
            run_logger.error(f"IMAGEN PLUGIN: Generation failed: {e}", exc_info=True)
            raise ImagenGenerationError(f"Imagen generation failed: {e}") from e
